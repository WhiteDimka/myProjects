#pragma once
#ifdef _WIN32
	#include <windows.h>
#else
	#include <unistd.h>
	#include <sys/types.h>
	#include <sys/socket.h>

#endif

#include <iostream>

const int BUFFER_SIZE = 2048;//размер буфера

/// ## Класс симуляции переменных условий среды
///
/// Объект данного класса обеспечивает нарушение и искажение передаваемых через сервер данных.
/// Данные пришедшие с одного подключенного клиента рассылаются всем остальным клиентам.
/// Для прохождения данных через симуляцию переменных условий среды используется метод run().
/// Для взаимодействия с данным модулем сервер имеет следующие методы turn_latency(),
/// turn_loss(), turn_mixing(), turn_noise(), set_min_latency(), set_max_latency(),
/// set_loss_rate(), set_mixing_rate(), set_noise_rate(), set_latency_flag(), 
/// set_loss_flag(), set_mixing_flag(), set_noise_flag(), input_min_latency(),
/// input_max_latency(), input_loss_rate(), input_mixing_rate(), input_noise_rate(),
/// input_noise_intensivity(), get_min_latency(), get_max_latency(), get_loss_rate(),
/// get_mixing_rate(), get_noise_rate(), get_noise_intensivity().
/// 
/// При трансляции данных через сервер, данные пропускаются через метод данного класса.
/// По умолчанию все помехи при запуске сервера выключены.
/// С помощью графического пользовательского интерфейса на сервере, пользователь может в 
/// реальном времени включать, выключать и настраивать помехи в передаче данных. Помехи включают 
/// в себя задержку передачи пакетов, джиттер, потерю пакетов, перемешивание пакетов и искажение 
/// передаваемых данных. В зависимости от выставленных настроек переменных условий среды
/// данные сначала проходят через потерю пакетов, затем искажение, перемешивание пакетов и задержку.
class SignalInterference {
private:
	int min_latency_ { 0 }; //минимальная задержка

	int max_latency_ { 1 }; //максимальная задержка
	
	int loss_rate_ { 0 }; //вероятность потери пакетов
	
	int mixing_rate_ { 0 }; //вероятность перемешивания пакетов
	
	int noise_rate_ { 0 }; //вероятность появления шумов

	int noise_intensivity_ { 1 }; //интенсивность шумов

	//флаги для включения определённого фуункционала среды:
	bool flag_latency_; // { false }; //задержка
	
	bool flag_loss_; // { false }; //потеря пакетов
	
	bool flag_mixing_; // { false }; //перемешивание пакетов

	bool flag_noise_; // { false }; //шумы (изменение передаваемых данных)

	char lost_packet_[BUFFER_SIZE + 1] = { 0 }; //потерянный пакет для примешивания в mixing

	void delay(); //случайная задержка на файл/каждый пакет

	void part_loss(char* buf);	//случайная потеря пакетов при записи

	void mixing(char** buf, int current_packet_number); //перемешивание пакетов при передаче

	void noise(char* buf); //воздействие шумов на передаваемые данные

public:
	/// ## Конструктор по умолчанию
	SignalInterference(bool f_latency = false, bool f_loss = false, bool f_mixing = false, bool f_noise = false); // : flag_latency_(f_latency), flag_loss_(f_loss), flag_mixing_(f_mixing), flag_noise_(f_noise) {}; //конструктор по умолчанию
	/// ## Конструктор копирования
	///
	/// @param [in] arg объект класса SignalInterference, с которого создаётся копия
	SignalInterference(const SignalInterference& arg); //конструктор копий
	/// ## Деструктор
	~SignalInterference();
	/// ## Вкл/выкл задержки
	void turn_latency();
	/// ## Вкл/выкл потери пакетов
	void turn_loss();
	/// ## Вкл/выкл перемешивания пакетов
	void turn_mixing();
	/// ## Вкл/выкл шумов
	void turn_noise();
	/// ## Установка включения модуля задержки передачи сигнала
	///
	/// @param [in] Islatency Включить ли модуль задержки передачи сигнала
	void set_latency_flag(bool Islatency);
	/// ## Установка включения модуля потери пакетов
	///
	/// @param [in] IsLoss Включить ли модуль потери пакетов
	void set_loss_flag(bool IsLoss);
	/// ## Установка включения модуля перемешивания пакетов
	///
	/// @param [in] IsMixing Включить ли модуль перемешивания пакетов
	void set_mixing_flag(bool IsMixing);
	/// ## Установка включения модуля добавления шумов
	///
	/// @param [in] IsNose Включить ли модуль добавления шумов 
	void set_noise_flag(bool IsNose);
	/// ## Установить минимальную задержку передачи сигнала
	void set_min_latency(int val);
	/// ## Установить максимальную задержку передачи сигнала
	///
	/// Задержка сигнала измеряется в миллисекундах.
	/// @attention Задержка сигнала расчитывается для каждого переданного пакета, 
	/// так что если за одну передачу будет переданно несколько пакетов, 
	/// передача будет длится задержка умноженная на количество передаваемых пакетов.
	/// Размер одного пакета 2048 байт
	void set_max_latency(int val);
	/// ## Установить вероятность потери пакетов
	///
	/// Вероятность потери пакетов устанавливается в диапазоне от 0% до 100%
	void set_loss_rate(int val);
	/// ## Установить вероятность перемешивания пакетов
	///
	/// Вероятность перемешивания пакетов устанавливается в диапазоне от 0% до 100%
	void set_mixing_rate(int val);
	/// ## Установить вероятность появления шумов
	///
	/// Вероятность появления шумов устанавливается в диапазоне от 0% до 100%
	void set_noise_rate(int val);
	/// ## Установить интенсивность шумов на пакет
	///
	/// Интенсивность шумов на пакет устанавливается в диапазоне от 0 до 280
	void set_noise_intensivity(int val);
	/// ## Ввести с клавиатуры минимальную задержку передачи сигнала
	void input_min_latency();
	/// ## Ввести с клавиатуры максимальную задержку передачи сигнала
	///
	/// Задержка сигнала измеряется в миллисекундах.
	/// @attention Задержка сигнала расчитывается для каждого переданного пакета, 
	/// так что если за одну передачу будет переданно несколько пакетов, 
	/// передача будет длится задержка умноженная на количество передаваемых пакетов.
	/// Размер одного пакета 2048 байт
	void input_max_latency();
	/// ## Ввести с клавиатуры вероятность потери пакетов
	///
	/// Вероятность потери пакетов устанавливается в диапазоне от 0% до 100%
	void input_loss_rate();
	/// ## Ввести с клавиатуры вероятность перемешивания пакетов
	///
	/// Вероятность перемешивания пакетов устанавливается в диапазоне от 0% до 100%
	void input_mixing_rate();
	/// ## Ввести с клавиатуры вероятность появления шумов
	///
	/// Вероятность появления шумов устанавливается в диапазоне от 0% до 100%
	void input_noise_rate();
	/// ## Ввести с клавиатуры интенсивность шумов на пакет
	///
	/// Интенсивность шумов на пакет устанавливается в диапазоне от 0 до 280
	void input_noise_intensivity();
	/// ## Вернуть с клавиатуры минимальную задержку передачи сигнала
	int get_min_latency();
	/// ## Вернуть с клавиатуры максимальную задержку передачи сигнала
	int get_max_latency();
	/// ## Вернуть с клавиатуры вероятность потери пакетов
	int get_loss_rate();
	/// ## Вернуть с клавиатуры вероятность перемешивания пакетов
	int get_mixing_rate();
	/// ## Вернуть с клавиатуры вероятность появления шумов
	int get_noise_rate();
	/// ## Вернуть интенсивность шумов на пакет
	int get_noise_intensivity();
	/// ## Запуск симуляции переменных условий среды
	///
	/// @param [in] buf Указатель на массив типа char, 
	/// в котором находятся необработанные данные
	/// @param [in] buf_siye int, содержащий размер массива
	void run(int buf_size, char* buf);

};
